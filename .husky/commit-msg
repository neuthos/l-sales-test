#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Get current branch name
branch_name=$(git symbolic-ref --short HEAD 2>/dev/null)

# Validate branch name
if [ -n "$branch_name" ]; then
  # Protected branches (always valid)
  if echo "$branch_name" | grep -qE '^(develop|staging|master|main)$'; then
    : # Valid protected branch
  # Release branches: release/vX.Y.Z
  elif echo "$branch_name" | grep -qE '^release/v[0-9]+\.[0-9]+\.[0-9]+$'; then
    : # Valid release branch
  # Feature branches: feat/<ticket/desc>, fix/<ticket/desc>, hotfix/<ticket/desc>
  elif echo "$branch_name" | grep -qE '^(feat|fix|hotfix)/[a-z0-9\-]+$'; then
    : # Valid feature branch
  else
    echo ""
    echo "‚ùå Invalid branch name: $branch_name"
    echo ""
    echo "üìã Branch naming conventions:"
    echo ""
    echo "   Protected branches:"
    echo "   ‚Ä¢ develop        - Default development branch"
    echo "   ‚Ä¢ staging        - UAT environment"
    echo "   ‚Ä¢ master/main    - Production environment"
    echo ""
    echo "   Release branches:"
    echo "   ‚Ä¢ release/vX.Y.Z - Release version (e.g., release/v1.2.0)"
    echo ""
    echo "   Feature branches:"
    echo "   ‚Ä¢ feat/<ticket/desc>    - New features (e.g., feat/ABC-123/user-auth)"
    echo "   ‚Ä¢ fix/<ticket/desc>     - Bug fixes (e.g., fix/ABC-456/login-bug)"
    echo "   ‚Ä¢ hotfix/<ticket/desc>  - Production hotfixes (e.g., hotfix/ABC-789/security-patch)"
    echo ""
    echo "üìå Rules:"
    echo "   ‚Ä¢ Use lowercase and hyphens only"
    echo "   ‚Ä¢ Feature branches ‚Üí checkout from develop"
    echo "   ‚Ä¢ Hotfix branches ‚Üí checkout from master"
    echo "   ‚Ä¢ Release branches ‚Üí checkout from develop"
    echo ""
    echo "‚úÖ Valid examples:"
    echo "   git checkout -b feat/ABC-123/add-user-dashboard"
    echo "   git checkout -b fix/XYZ-456/fix-login-redirect"
    echo "   git checkout master && git checkout -b hotfix/CRITICAL-789/patch-security-vulnerability"
    echo "   git checkout develop && git checkout -b release/v1.5.0"
    echo ""
    exit 1
  fi
fi

# Run commitlint to validate commit message
npx --no -- commitlint --edit "$1" || {
  echo ""
  echo "‚ùå Commit message validation failed!"
  echo ""
  echo "üìã Required format:"
  echo "   <type>(<scope>): <subject>"
  echo ""
  echo "   [optional body]"
  echo ""
  echo "   [optional footer]"
  echo ""
  echo "üìå Rules:"
  echo "   ‚Ä¢ Type: feat, fix, docs, style, refactor, perf, test, chore"
  echo "   ‚Ä¢ Scope: optional (e.g., auth, api, ui)"
  echo "   ‚Ä¢ Subject: max 50 chars, lowercase, imperative mood, no period"
  echo "   ‚Ä¢ Body: optional, wrap at 72 chars"
  echo "   ‚Ä¢ Footer: optional (e.g., 'Closes #123', 'BREAKING CHANGE: ...')"
  echo ""
  echo "‚úÖ Valid examples:"
  echo "   feat(auth): add login functionality"
  echo "   fix(api): resolve null pointer in user service"
  echo "   docs: update installation guide"
  echo "   refactor(ui): simplify button component logic"
  echo ""
  echo "   feat(dashboard): add revenue chart widget"
  echo "   "
  echo "   Add interactive revenue chart with filtering capabilities."
  echo "   Supports daily, weekly, and monthly views."
  echo "   "
  echo "   Closes #456"
  echo ""
  echo "üí° To bypass validation (emergency only):"
  echo "   git commit --no-verify -m \"your message\""
  echo ""
  exit 1
}
