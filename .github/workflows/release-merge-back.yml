name: Release Merge Back to Develop

on:
  pull_request:
    types:
      - closed
    branches:
      - master
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  merge-back-to-develop:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release branch name
        id: get-branch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the source branch of the merged PR to master/main (which should be a release branch)
          RELEASE_BRANCH="${{ github.event.pull_request.head.ref }}"
          
          if [[ $RELEASE_BRANCH == release/* ]]; then
            echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
            echo "Found release branch from merged PR: $RELEASE_BRANCH"
          else
            # If the merged PR wasn't directly from a release branch, find the most recent one
            echo "Looking for recent release branch..."
            RELEASE_BRANCH=$(gh pr list \
              --base "${{ github.event.pull_request.base.ref }}" \
              --head "release/*" \
              --state merged \
              --limit 1 \
              --json headRefName \
              --jq '.[0].headRefName' 2>/dev/null || echo "")
            
            if [ -n "$RELEASE_BRANCH" ] && [ "$RELEASE_BRANCH" != "null" ]; then
              echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
              echo "Found release branch: $RELEASE_BRANCH"
            else
              echo "release_branch=" >> $GITHUB_OUTPUT
              echo "No release branch identified from merged PR"
            fi
          fi

      - name: Check if release branch exists
        if: steps.get-branch.outputs.release_branch != ''
        id: check-branch
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_BRANCH: ${{ steps.get-branch.outputs.release_branch }}
        run: |
          # Check if the branch actually exists in the repo
          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "Branch $RELEASE_BRANCH exists"
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "Branch $RELEASE_BRANCH does not exist"
          fi

      - name: Check for existing PR from release to develop
        if: steps.check-branch.outputs.branch_exists == 'true'
        id: check-existing-pr
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_BRANCH: ${{ steps.get-branch.outputs.release_branch }}
        run: |
          PR_COUNT=$(gh pr list --base develop --head $RELEASE_BRANCH --state open --json number --jq 'length')
          echo "existing_pr_count=$PR_COUNT" >> $GITHUB_OUTPUT

      - name: Create PR from release to develop
        if: steps.check-branch.outputs.branch_exists == 'true' && steps.check-existing-pr.outputs.existing_pr_count == '0'
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_BRANCH: ${{ steps.get-branch.outputs.release_branch }}
        run: |
          gh pr create \
            --base develop \
            --head $RELEASE_BRANCH \
            --title "ðŸ”„ Sync release changes back to develop" \
            --body "## Synchronize Release Changes to Develop

          This PR was automatically created to sync changes from the release branch back to develop after the release was merged to master.

          This includes:
          - Version bumps made during the release
          - Any other changes that went into the release

          ### What to do:
          1. Review the changes
          2. Resolve any conflicts if necessary
          3. Merge this PR to keep develop in sync with master

          --- 
          *Generated by GitHub Actions*"