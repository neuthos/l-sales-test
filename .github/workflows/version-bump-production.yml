name: Version Bump & Production Release

on:
  pull_request:
    types:
      - closed
    branches:
      - master
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  version-bump:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get current version and commit before changes
        id: version-info
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          
          # Store the commit hash before any changes
          COMMIT_BEFORE_CHANGES=$(git rev-parse HEAD)
          echo "commit_before_changes=$COMMIT_BEFORE_CHANGES" >> $GITHUB_OUTPUT
          echo "Commit before changes: $COMMIT_BEFORE_CHANGES"

      - name: Determine version bump type
        id: bump-type
        env:
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
        run: |
          echo "PR Labels: $PR_LABELS"

          # Check for version labels
          if echo "$PR_LABELS" | grep -q "MAJOR"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "🔴 MAJOR version bump detected"
          elif echo "$PR_LABELS" | grep -q "MINOR"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "🔵 MINOR version bump detected"
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "🟢 PATCH version bump (default)"
          fi

      - name: Bump version
        id: new-version
        run: |
          BUMP_TYPE=${{ steps.bump-type.outputs.bump_type }}

          # Bump version using npm
          npm version $BUMP_TYPE --no-git-tag-version

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Get commit after version bump but before commit
        id: commit-after-bump
        run: |
          # Get the commit hash after version bump but before committing
          COMMIT_AFTER_BUMP=$(git rev-parse HEAD)
          echo "commit_after_bump=$COMMIT_AFTER_BUMP" >> $GITHUB_OUTPUT
          echo "Commit after version bump: $COMMIT_AFTER_BUMP"

      - name: Generate changelog (before final commit)
        id: changelog
        env:
          GH_TOKEN: ${{ github.token }}
          OLD_VERSION: ${{ steps.version-info.outputs.current_version }}
          NEW_VERSION: ${{ steps.new-version.outputs.version }}
        run: |
          # Check if the old version tag exists
          if git rev-parse "v$OLD_VERSION" >/dev/null 2>&1; then
            # If the old tag exists, get commits between old tag and commit before version bump
            COMMITS=$(git log --pretty=format:"- %s (%h)" "v$OLD_VERSION..${{ steps.version-info.outputs.commit_before_changes }}")
          else
            # If the old tag doesn't exist (first release), get all commits up to the current state before version bump
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${{ steps.version-info.outputs.commit_before_changes }})
            echo "⚠️ Previous tag v$OLD_VERSION not found. Including all commits up to this point."
          fi

          # Create changelog
          cat > CHANGELOG.md << EOF
          ## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v$OLD_VERSION...v$NEW_VERSION
          EOF

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version bump
        env:
          NEW_VERSION: ${{ steps.new-version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push origin ${{ github.event.pull_request.base.ref }}

      - name: Create Git tag
        env:
          NEW_VERSION: ${{ steps.new-version.outputs.version }}
        run: |
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
          NEW_VERSION: ${{ steps.new-version.outputs.version }}
          BUMP_TYPE: ${{ steps.bump-type.outputs.bump_type }}
        run: |
          # Determine release emoji and title
          case $BUMP_TYPE in
            major)
              EMOJI="🚀"
              RELEASE_TYPE="Major Release"
              ;;
            minor)
              EMOJI="✨"
              RELEASE_TYPE="Minor Release"
              ;;
            patch)
              EMOJI="🐛"
              RELEASE_TYPE="Patch Release"
              ;;
          esac

          gh release create "v$NEW_VERSION" \
            --title "$EMOJI $RELEASE_TYPE v$NEW_VERSION" \
            --notes "${{ steps.changelog.outputs.changelog }}" \
            --verify-tag

      - name: Summary
        env:
          OLD_VERSION: ${{ steps.version-info.outputs.current_version }}
          NEW_VERSION: ${{ steps.new-version.outputs.version }}
          BUMP_TYPE: ${{ steps.bump-type.outputs.bump_type }}
        run: |
          echo "## ✅ Production Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $OLD_VERSION → $NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Bump Type:** $BUMP_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 Release is now live on GitHub!" >> $GITHUB_STEP_SUMMARY
