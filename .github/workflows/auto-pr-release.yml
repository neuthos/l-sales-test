name: Auto PR to Release

on:
  pull_request:
    types:
      - closed
    branches:
      - staging

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release-pr:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for active release branches
        id: check-active-release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if there's any open PR from release/* to master/main
          ACTIVE_RELEASE_PR=$(gh pr list \
            --base master \
            --head "release/*" \
            --state open \
            --json number \
            --jq 'length')

          # Also check for main branch (in case repo uses 'main' instead of 'master')
          ACTIVE_RELEASE_PR_MAIN=$(gh pr list \
            --base main \
            --head "release/*" \
            --state open \
            --json number \
            --jq 'length' 2>/dev/null || echo "0")

          TOTAL_ACTIVE=$((ACTIVE_RELEASE_PR + ACTIVE_RELEASE_PR_MAIN))
          echo "active_release_count=$TOTAL_ACTIVE" >> $GITHUB_OUTPUT

          if [ "$TOTAL_ACTIVE" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $TOTAL_ACTIVE active release PR(s)"
            # Get the branch name of existing release
            EXISTING_BRANCH=$(gh pr list --base master --head "release/*" --state open --json headRefName --jq '.[0].headRefName' 2>/dev/null || \
                             gh pr list --base main --head "release/*" --state open --json headRefName --jq '.[0].headRefName' 2>/dev/null)
            echo "existing_branch=$EXISTING_BRANCH" >> $GITHUB_OUTPUT
            echo "üìã Existing release branch: $EXISTING_BRANCH"
          else
            echo "‚úÖ No active release branches found"
          fi

      - name: Comment on staging PR about active release
        if: steps.check-active-release.outputs.active_release_count != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const existingBranch = '${{ steps.check-active-release.outputs.existing_branch }}';
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ö†Ô∏è **Active Release Branch Detected**\n\nCannot create new release branch because **\`${existingBranch}\`** is still active.\n\n**What to do:**\n1. Complete the current release (merge ${existingBranch} to master)\n2. After that, you can create a new release from staging\n\n*Note: Only one release branch can be active at a time.*`
            })

      - name: Skip if active release exists
        if: steps.check-active-release.outputs.active_release_count != '0'
        run: |
          echo "‚è≠Ô∏è Skipping release branch creation"
          echo "üìã Active release: ${{ steps.check-active-release.outputs.existing_branch }}"
          echo "‚ÑπÔ∏è Complete the current release before creating a new one"
          exit 0

      - name: Get current date
        if: steps.check-active-release.outputs.active_release_count == '0'
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create release branch
        if: steps.check-active-release.outputs.active_release_count == '0'
        env:
          RELEASE_BRANCH: release/${{ steps.date.outputs.date }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if branch exists
          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            echo "‚ÑπÔ∏è Branch $RELEASE_BRANCH already exists"
            git fetch origin $RELEASE_BRANCH
            git checkout $RELEASE_BRANCH
          else
            echo "‚ú® Creating new branch $RELEASE_BRANCH"
            git checkout -b $RELEASE_BRANCH
            git push origin $RELEASE_BRANCH
          fi

      - name: Check for existing PR
        if: steps.check-active-release.outputs.active_release_count == '0'
        id: check-pr
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_BRANCH: release/${{ steps.date.outputs.date }}
        run: |
          PR_COUNT=$(gh pr list --base $RELEASE_BRANCH --head staging --state open --json number --jq 'length')
          echo "pr_count=$PR_COUNT" >> $GITHUB_OUTPUT

      - name: Create PR to release branch
        if: |
          steps.check-active-release.outputs.active_release_count == '0' &&
          steps.check-pr.outputs.pr_count == '0'
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_BRANCH: release/${{ steps.date.outputs.date }}
          RELEASE_DATE: ${{ steps.date.outputs.date }}
        run: |
          gh pr create \
            --base $RELEASE_BRANCH \
            --head staging \
            --title "üì¶ Release $RELEASE_DATE - Ready for Production" \
            --body "## Release Branch: $RELEASE_DATE

          This PR was automatically created after merging to \`staging\`.

          ### Pre-Production Checklist:
          - [ ] QA testing completed on staging
          - [ ] All tests passing
          - [ ] Documentation updated
          - [ ] Release notes prepared

          ### Deployment Steps:
          1. Review all changes in this PR
          2. Merge this PR to create production-ready release
          3. Create final PR: \`$RELEASE_BRANCH ‚Üí master\`
          4. Add version label (PATCH/MINOR/MAJOR) to master PR
          5. Merge to master for production deployment

          ### Version Bump:
          When creating PR to \`master\`, add one of these labels:
          - üü¢ **PATCH** - Bug fixes (0.0.X) - *default if no label*
          - üîµ **MINOR** - New features (0.X.0)
          - üî¥ **MAJOR** - Breaking changes (X.0.0)

          ---
          *Generated by GitHub Actions*"

      - name: PR already exists
        if: |
          steps.check-active-release.outputs.active_release_count == '0' &&
          steps.check-pr.outputs.pr_count != '0'
        run: |
          echo "‚ÑπÔ∏è PR from staging to release/${{ steps.date.outputs.date }} already exists. Skipping PR creation."
